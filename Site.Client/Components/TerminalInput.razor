@rendermode InteractiveAuto

<div>
    <label>User</label>
    <EditForm Model="this" OnValidSubmit="SubmitAsync" @onclick="FocusInputFieldAsync" style="padding-bottom: 4rem">
        <AntiforgeryToken />
        <DataAnnotationsValidator />
        @if (string.IsNullOrEmpty(Message))
        {
            <span class="instructions">Tap to respond.</span>
        }
        <input autocomplete="off" @ref="_inputField" @bind-value="Message" @bind-value:event="oninput" />
    </EditForm>
</div>

@code {

    private ElementReference _inputField;

    [Required]
    private string Message { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> OnUserInputReceived { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InvokeAsync(async () =>
            {
                await FocusInputFieldAsync();
                StateHasChanged();
            });
        }
    }

    private async Task FocusInputFieldAsync()
    {
        await _inputField.FocusAsync();
    }

    private async Task SubmitAsync()
    {
        if (!string.IsNullOrWhiteSpace(Message))
            await OnUserInputReceived.InvokeAsync(Message);
    }

}

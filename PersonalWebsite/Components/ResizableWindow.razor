@using Microsoft.JSInterop
@implements IAsyncDisposable

<div class="window @(IsActive ? "active" : "") @(IsMaximized ? "maximized" : "")" 
     style="width: @(Width)px; height: @(Height)px; top: @(Y)px; left: @(X)px; z-index: @ZIndex;"
     data-window-id="@WindowId"
     @ref="windowElement">
    <div class="window-header">
        <div class="window-title">@Title</div>
        <div class="window-controls">
            <button class="window-button minimize" @onclick="OnMinimize">_</button>
            <button class="window-button maximize" @onclick="OnMaximize">□</button>
            <button class="window-button close" @onclick="OnClose">×</button>
        </div>
    </div>
    <div class="window-content">
        @ChildContent
    </div>
    <div class="resize-handle"></div>
</div>

@code {
    [Parameter]
    public string Title { get; set; } = "Window";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int X { get; set; } = 50;

    [Parameter]
    public int Y { get; set; } = 50;

    [Parameter]
    public int Width { get; set; } = 600;

    [Parameter]
    public int Height { get; set; } = 400;

    [Parameter]
    public int ZIndex { get; set; } = 1;

    [Parameter]
    public bool IsActive { get; set; } = true;
    
    [Parameter]
    public bool IsMaximized { get; set; } = false;
    
    [Parameter]
    public string WindowId { get; set; } = "";

    [Parameter]
    public EventCallback OnMinimize { get; set; }

    [Parameter]
    public EventCallback OnMaximize { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback<WindowPosition> OnPositionChanged { get; set; }
    
    [Parameter]
    public EventCallback<string> OnActivate { get; set; }

    private ElementReference windowElement;
    private DotNetObjectReference<ResizableWindow>? objRef;
    private IJSObjectReference? module;
    private bool suppressStateHasChanged = false;

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/window.js");
            await module.InvokeVoidAsync("initializeWindow", windowElement, objRef);
        }
    }
    
    [JSInvokable]
    public async Task ActivateWindow(string windowId)
    {
        // Let the parent component know this window should be activated
        await OnActivate.InvokeAsync(windowId);
    }

    [JSInvokable]
    public async Task UpdatePosition(int x, int y, int width, int height)
    {
        // Only update if position has changed
        if (X != x || Y != y || Width != width || Height != height)
        {
            X = x;
            Y = y;
            Width = width;
            Height = height;

            // Notify parent component but don't trigger a render here
            suppressStateHasChanged = true;
            await OnPositionChanged.InvokeAsync(new WindowPosition { X = x, Y = y, Width = width, Height = height });
            suppressStateHasChanged = false;
        }
    }
    
    protected override bool ShouldRender()
    {
        // Skip renders during position updates that happen in JS
        return !suppressStateHasChanged;
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (module is not null)
            {
                await module.DisposeAsync();
            }
            
            objRef?.Dispose();
        }
        catch (Exception)
        {
            // Ignore disposal exceptions
        }
    }

    public class WindowPosition
    {
        public int X { get; set; }
        public int Y { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
} 